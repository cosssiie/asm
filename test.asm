.MODEL SMALL
.STACK 100H
.DATA
    filename DB 'test.in', 0
    VAR DB 100 DUP('$')
    substring DB 'aa', 0 ; Підрядок, який ми шукаємо
    count_msg DB 'Count of substrings: $'

.CODE
MAIN PROC
    MOV AX, @DATA
    MOV DS, AX

    ; Відкриття файлу для читання
    MOV AH, 3DH ; Код операції відкриття файлу
    MOV AL, 0 ; Режим читання
    LEA DX, filename ; Адреса рядка з ім'ям файлу
    INT 21H ; Виклик преривання DOS

    MOV BX, AX ; Зберігання дескриптору відкритого файлу

    ; Читання з файлу
    MOV AH, 3FH ; Код операції читання з файлу
    LEA DX, VAR ; Адреса масиву, куди буде зчитано з файлу
    MOV CX, 100 ; Кількість байт для читання
    INT 21H ; Виклик преривання DOS

    ; Пошук підрядка та виведення кількості знайдених підрядків
    MOV SI, OFFSET VAR ; Початок тексту
    MOV DI, OFFSET substring ; Початок підрядка
    MOV CX, 0 ; Лічильник знайдених підрядків
    
inner_loop:
    MOV AX, DX ; Завантаження вмісту регістра DX в AX
    MOV AL, AH ; Завантаження молодшого байта з AX в AL    CMP AL, 0 ; Перевірка на кінець рядка
    JE end_search ; Якщо досягнуто кінець рядка, завершити пошук
    MOV AL, [SI] ; Завантаження наступного символу підрядка
    CMP AL, 0 ; Перевірка на кінець підрядка
    JE substring_found ; Якщо досягнуто кінець підрядка, підрядок знайдено
CMP BYTE PTR [SI], AL ; Порівняння символів підрядка та тексту
    JNE not_found ; Якщо символи не збігаються, перейти до наступного символу тексту
    INC SI ; Перехід до наступного символу тексту
    INC DX ; Перехід до наступного символу тексту
    JMP inner_loop ; Повторити цикл порівняння символів
substring_found:
    INC CX ; Збільшення лічильника знайдених підрядків
    INC SI ; Перехід до наступного символу у тексті
    INC DX ; Перехід до наступного символу у файлі
    JMP inner_loop ; Повторення внутрішнього циклу

not_found:
    INC SI ; Перехід до наступного символу у тексті
    INC DX ; Перехід до наступного символу у файлі
    JMP inner_loop ; Повторення внутрішнього циклу

end_search:
    ; Виведення кількості знайдених підрядків
    MOV AH, 09H ; Код операції виведення рядка
    LEA DX, count_msg ; Адреса рядка
    INT 21H ; Виклик преривання DOS

    MOV AX, CX ; Переміщення кількості підрядків у регістр AX
    CALL print_word ; Виклик підпрограми виведення числа

    ; Закриття файлу
    MOV AH, 3EH ; Код операції закриття файлу
    MOV BX, BX ; BX містить дескриптор файлу
    INT 21H ; Виклик преривання DOS

    JMP exit_program ; Перехід до завершення програми

exit_program:
    MOV AH, 4CH ; Код операції завершення програми
    INT 21H ; Виклик преривання DOS

print_word PROC
    ; Підпрограма для виведення 16-бітного числа (збереженого в регістрі AX) на екран
    PUSH AX ; Збереження регістра AX у стеку
    PUSH BX ; Збереження регістра BX у стеку
    PUSH CX ; Збереження регістра CX у стеку
    PUSH DX ; Збереження регістра DX у стеку

    MOV CX, 10 ; Основа для десяткового числа
    XOR BX, BX ; Очистка регістру BX

next_digit:
    XOR DX, DX ; Очистка регістру DX
    DIV CX ; Ділення AX на 10, результат у AX, остача у DX
    ADD DL, '0' ; Перетворення остачі у символ
    PUSH DX ; Збереження символу у стеку
    INC BX ; Збільшення лічильника цифр

    TEST AX, AX ; Перевірка, чи результат ділення ще не нуль
    JNZ next_digit ; Якщо так, продовжити обчислення

print_loop:
    POP DX ; Вилучення цифри зі стеку
    MOV AH, 2 ; Функція виводу символу
    INT 21H ; Виклик преривання DOS
    LOOP print_loop ; Повторити, доки є цифри

    POP DX ; Відновлення регістру DX
    POP CX ; Відновлення регістру CX
    POP BX ; Відновлення регістру BX
    POP AX ; Відновлення регістру AX

    RET ; Повернення з підпрограми
print_word ENDP

MAIN ENDP
END MAIN
